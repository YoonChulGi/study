package board.elastic.service;

import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

import org.apache.http.HttpEntity;
import org.apache.http.HttpHost;
import org.apache.http.entity.ContentType;
import org.apache.http.nio.entity.NStringEntity;
import org.apache.http.util.EntityUtils;
import org.elasticsearch.client.Response;
import org.elasticsearch.client.RestClient;

//import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Service;

import com.google.gson.Gson;
import com.google.gson.JsonObject;

@Service
public class ElasticServiceImpl implements ElasticService{
	
	private Logger log = LoggerFactory.getLogger(this.getClass());
	
	private String host = "127.0.0.1";
	private int port = 9200;
	
	private final String ELASTIC_INDEX = "선별진료소";
	private final String ELASTIC_TYPE = "_doc";
	

	@Override
	public String sendGET() throws Exception {
		log.debug("sendGet() called !!");
		String id = "DfbtunsBcW0Djpftabvh";
//		String id = "";
		String url = ELASTIC_INDEX + "/" + ELASTIC_TYPE+"/"+id;
		String result = callElasticApi("GET", url, null, null);
		log.debug("result ===>" + result);
		return result;
	}
	
	public String callElasticApi(String method, String url, Object obj, String jsonData) {
		Map<String, Object> result = new HashMap<>();
		String json = "";
        String jsonString;
        //json형태의 파라미터가 아니라면 gson으로 만들어주자.
        if (jsonData == null) {
            Gson gson = new Gson();
            jsonString = gson.toJson(obj);
        } else {
            jsonString = jsonData;
        }

        //엘라스틱서치에서 제공하는 restClient를 통해 엘라스틱서치에 접속한다
        try(RestClient restClient = RestClient.builder(new HttpHost(host, port)).build()) {
            Map<String, String> params =  Collections.singletonMap("pretty", "true");
            //엘라스틱서치에서 제공하는 response 객체
            Response response = null;

            //GET, DELETE 메소드는 HttpEntity가 필요없다
            if (method.equals("GET") || method.equals("DELETE")) {
                response = restClient.performRequest(method, url, params);
            } else {
                HttpEntity entity = new NStringEntity(jsonString, ContentType.APPLICATION_JSON);
                response = restClient.performRequest(method, url, params, entity);
            }
            //앨라스틱서치에서 리턴되는 응답코드를 받는다
            int statusCode = response.getStatusLine().getStatusCode();
            //엘라스틱서치에서 리턴되는 응답메시지를 받는다
            String responseBody = EntityUtils.toString(response.getEntity());
            Gson gson = new Gson();
        	JsonObject object = new JsonObject();
        	object.addProperty("resultCode", statusCode);
        	object.addProperty("resultBody", responseBody);
        	json = gson.toJson(object);
        	System.out.println(json);
        } catch (Exception e) {
            result.put("resultCode", -1);
            result.put("resultBody", e.toString());
        }
        return json;
	}
	
}
